#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

//#include <dt-bindings/zmk/mouse.h>
// Layers

#define MAC 0
#define MAC_CODE 1
#define UN_NUM 2
#define MAC_FUNC 3
#define WIN 4
#define WIN_CODE 5
#define WIN_NUM 6
#define WIN_FUNC 7

/*
&mmv {    
        time-to-max-speed-ms = <500>;
        acceleration-exponent=<1>;
};
&mwh {    
        time-to-max-speed-ms = <2000>;
        acceleration-exponent=<0>;
}; 
*/
// Behavior Overrides

&lt {
    tapping-term-ms = <200>;
    flavor = "balanced";
};

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };
};

/ {
    //combos {
    //  compatible = "zmk,combos";
    //combo_tab {
    //  timeout-ms = <20>;
    //  key-positions = <1 2>;
    //  bindings = <&kp TAB>;
    //};
    //  combo_enter {
    //    timeout-ms = <20>;
    //  key-positions = <13 14>;
    //bindings = <&kp ENTER>;
    //};
    //};

    behaviors {
        bm: bottom_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "BOTTOM_ROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        cm: code_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "CODE_ROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            retro-tap;
        };

        tdPar: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LPAR>, <&kp RPAR>;

            label = "( )";
        };

        sm: space_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE_MOD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        tdBrk: tdBrk {
            compatible = "zmk,behavior-tap-dance";
            label = "TDBRK";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp RBKT>;
        };

        tdBrc: tdBrc {
            compatible = "zmk,behavior-tap-dance";
            label = "TDBRC";
            #binding-cells = <0>;
            bindings = <&kp LBRC>, <&kp RBRC>;
        };

        tdYabaiQouteGrave: tdYabaiQouteGrave {
            compatible = "zmk,behavior-tap-dance";
            label = "TDYABAIQOUTEGRAVE";
            #binding-cells = <0>;
            bindings = <&lt 3 SQT>, <&tog 3>;

            tapping-term-ms = <150>;
        };

        tdSpaceShiftCaps: tdSpaceShiftCaps {
            compatible = "zmk,behavior-tap-dance";
            label = "TDSPACESHIFTCAPS";
            #binding-cells = <0>;
            bindings = <&mt LSHIFT SPACE>, <&caps_word>;
        };

        ParaShift: ParaShift {
            compatible = "zmk,behavior-mod-morph";
            label = "PARASHIFT";
            bindings = <&tdPar>, <&kp RPAR>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        BraceShift: BraceShift {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACESHIFT";
            bindings = <&tdBrc>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        BracketShift: BracketShift {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACKETSHIFT";
            bindings = <&tdBrk>, <&kp RBKT>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        new_combo {
            bindings = <&kp LG(G)>;
            key-positions = <13 31>;
            layers = <0>;
        };

        leftspace {
            bindings = <&kp LS(LA(LC(A)))>;
            key-positions = <13 12>;
        };

        rightspace {
            bindings = <&kp LC(LS(LA(N8)))>;
            key-positions = <16 17>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        mac_default_layer {
            bindings = <
  &kp Q    &kp W  &kp E           &kp R         &kp T                   &kp Y                      &kp U         &kp I      &kp O       &kp P
  &lt 1 A  &kp S  &kp D           &kp F         &kp G                   &kp H                      &kp J         &kp K      &kp L       &lt 3 SQT
  &lt 2 Z  &kp X  &kp C           &kp V         &kp B                   &kp N                      &kp M         &kp COMMA  &kp PERIOD  &mt RCTRL SLASH
                  &mt LALT ENTER  &mt LGUI ESC  &mt LEFT_SHIFT SPACE    &mt RIGHT_SHIFT BACKSPACE  &mt RALT DEL  &lt 4 TAB
            >;
        };

        mac_code_layer {
            bindings = <
  &kp EXCL   &kp AT         &kp HASH            &kp DOLLAR     &kp PERCENT                 &kp RA(LEFT)            &kp RG(LEFT)   &kp RG(RIGHT)  &kp RA(RIGHT)  &kp TILDE
  &trans     &kp AMPERSAND  &kp ASTRK           &ParaShift     &BraceShift                 &kp LEFT                &kp DOWN       &kp UP         &kp RIGHT      &kp SEMI
  &kp TILDE  &kp GRAVE      &kp CARET           &BracketShift  &none                       &kp HOME                &kp PAGE_DOWN  &kp PAGE_UP    &kp END        &kp BACKSLASH
                            &mt LALT BACKSPACE  &mt LGUI DEL   &mt LEFT_SHIFT BACKSPACE    &mt RIGHT_SHIFT DELETE  &kp RALT       &kp TAB
            >;
        };

        mac_function_layer {
            bindings = <
  &trans  &trans      &kp C_BRI_DEC     &kp C_BRIGHTNESS_INC  &none                &kp TILDE      &kp N7  &kp N8  &kp N9  &kp MINUS
  &trans  &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT            &trans               &kp MINUS      &kp N4  &kp N5  &kp N6  &kp PLUS
  &trans  &kp C_MUTE  &kp C_VOL_DN      &kp C_VOL_UP          &trans               &kp SLASH      &kp N1  &kp N2  &kp N3  &kp EQUAL
                      &kp ENTER         &kp LEFT_GUI          &tdSpaceShiftCaps    &kp BACKSPACE  &kp N0  &trans
            >;
        };

        yabai_layer {
            bindings = <
  &kp LS(LA(LC(Q)))  &kp LS(LA(LC(W)))  &kp LS(LA(LC(E)))         &kp LS(LA(LC(R)))         &kp LS(LA(LC(T)))           &kp LS(LA(LC(Y)))         &kp LS(LA(LC(U)))         &kp LS(LA(LC(I)))         &kp LS(LA(LC(O)))    &kp LS(LA(LC(P)))
  &kp LS(LA(LC(A)))  &kp LS(LA(LC(S)))  &kp LS(LA(LC(D)))         &kp LS(LA(LC(F)))         &kp LS(LA(LC(G)))           &kp LS(LA(LC(H)))         &kp LS(LA(LC(J)))         &kp LS(LA(LC(K)))         &kp LS(LA(LC(L)))    &to 0
  &kp LS(LA(LC(Z)))  &kp LS(LA(LC(X)))  &kp LS(LA(LC(C)))         &kp LS(LA(LC(V)))         &kp LS(LC(LA(B)))           &kp LS(LA(LC(N)))         &kp LS(LA(LC(M)))         &kp LS(LA(LC(COMMA)))     &kp LS(LA(LC(DOT)))  &kp LS(LA(LC(SLASH)))
                                        &kp LS(LA(LC(NUMBER_4)))  &kp LS(LA(LC(NUMBER_5)))  &kp LS(LA(LC(NUMBER_6)))    &kp LS(LA(LC(NUMBER_7)))  &kp LS(LA(LC(NUMBER_8)))  &kp LS(LA(LC(NUMBER_9)))
            >;
        };

        function_key_bt_layer {
            bindings = <
  &kp F1   &kp F2   &kp F3      &kp F4        &kp F5       &out OUT_TOG   &kp F16  &kp F17  &kp F18  &bt BT_SEL 0
  &kp F6   &kp F7   &kp F8      &kp F9        &kp F10      &none          &kp F19  &kp F20  &kp F21  &bt BT_SEL 1
  &kp F11  &kp F12  &kp F13     &kp F14       &kp F15      &trans         &trans   &trans   &trans   &bt BT_SEL 2
                    &bt BT_CLR  &kp LEFT_GUI  &kp SPACE    &kp BACKSPACE  &trans   &trans
            >;
        };
    };
};
